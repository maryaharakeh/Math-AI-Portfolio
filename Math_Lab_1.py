# -*- coding: utf-8 -*-
"""Copy of Hahn Math 24 Lab 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LjOpT8vgf8hTf4leErRiWN-Ftb-yCp3X

## Python Basics

### Calculator
"""

# Comments with hashtag, python ignores this

#Addition and Subtraction

30.34321 + 9.12313 - 3.5567

#Multiplication

2*2

#Exponents

2**8

2**123

2**12345

#Setting the limit to 100,000 digits
import sys
sys.set_int_max_str_digits(100000)
2**45678

#Division

8/4

#Floor division rounds the result down to the nearest whole number

8//4

#The modulus operator returns the remainder of the division

x = 8%12

13%12

22%12

24%12

"""### Variables"""

#The equal sign in python is used to assign variables

apples = 5

oranges = 8

total = apples + oranges

#Displaying the value of of a variable

total

#Squaring a variable

apples**2

cost_per_apple = 0.25

total_apple_costs = cost_per_apple * apples

total_apple_costs

"""### Vectors"""

#numpy library allows us to create arrays while the matplotlib library is
#used to create visualizations
import numpy as np
import matplotlib.pyplot as plt
#giving these libraries abbreviations allows us to access functions quickly

#To create an array starting at 0 and ending at 9:

np.arange(10)

x = np.arange(10)

x

y = 3 * x + 5

y

#The following comments would reassign the values of these two variables.
#However, the hashtag hides these functions, so they are not executed.
#x = np.array([133,24,333,4,5,6])
#y = np.array([11,22,33,44,55,66])

x,y

"""### Plotting"""

plt.plot(x,y)  #creates a graph of y with respect to x

plt.plot(x,y,'.')  #creates a dotted line

plt.plot(x,y,'r.')  #creates a red dotted line

plt.plot(x,y,'b--')  #creates a dashed blue line

import matplotlib.pyplot as plt

plt.plot(x,y)

x = np.linspace(0,5,10)
#this creates an array from 1 to 5 with 10 evenly spaced numbers

x

y = x**2

plt.plot(x,y)

plt.plot(x,y)
plt.title("New Graph of x**2");  #adding graph title
plt.xlabel("x");   #adding x-axis label
plt.ylabel("y");   #adding y-axis label

plt.plot(x,y,label="x squared")
plt.title("Graph of x**2");
plt.xlabel("x");
plt.ylabel("y");
plt.legend()  #this creates a legend for the graph

x = np.linspace(0, 2, 100)

#this adds multiple graphs to one plot and creates labels
plt.plot(x, x, label='linear')
plt.plot(x, x**2, label='quadratic')
plt.plot(x, x**3, label='cubic')

plt.xlabel('x label')
plt.ylabel('y label')

plt.title("Simple Plot")

#labels are added to the legend
plt.legend()

labels = 'Frogs', 'Dogs', 'Cats', 'Birds' # creates a tuple of strings
explode = (0, 0.1, 0, 0)  #second slice will be offsetted from the center
sizes = [15, 30, 40, 15] #creates a list of numbers for each slice
fig1, ax1 = plt.subplots()  #creates a new figure and a subplot
#to create a pie chart in the subplot:
ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()  #displays plot

import numpy as np
import matplotlib.pyplot as plt
t = np.arange(0.0, 2.0, 0.01) #creates an array from 0 to 2 with a step of 0.01
s = np.sin(2*np.pi*t) #creates an array by applying the sine function

plt.plot(t, s) #plots s against t
plt.title(r'$\alpha_i > \beta_i$', fontsize=20) #creates a title
plt.text(1, -0.6, r'$\sum_{i=0}^\infty x_i$', fontsize=20) #adds text to plot
plt.text(0.5, 0.6, r'$\mathcal{A}\mathrm{sin}(2 \omega t)$',fontsize=15)
plt.xlabel('time (s)')  #creates a label for the x-axis
plt.ylabel('volts (mV)')  #creates a label for the y-axis
plt.show()

"""Plot the following functions from $x = -10$ to $x = 10$

(Hint: np.sin, np.exp)

$y = 10x+7$

$y = -3x-12$

$y=\sin(x)$

$y=e^x$

$y=e^{-x^2}$
"""

import matplotlib.pyplot as plt
import numpy as np

# Define the range of x
x = np.linspace(-10, 10, 400)

# Define the functions
y1 = 10*x + 7
y2 = -3*x - 12
y3 = np.sin(x)
y4 = np.exp(x)
y5 = np.exp(-x**2)

# Create the figure and subplots
fig, axs = plt.subplots(nrows=1, ncols=5, figsize=(20, 4))

# Plot each function on a separate subplot
axs[0].plot(x, y1)
axs[0].set_title('y = 10x + 7')

axs[1].plot(x, y2)
axs[1].set_title('y = -3x - 12')

axs[2].plot(x, y3)
axs[2].set_title('y = sin(x)')

axs[3].plot(x, y4)
axs[3].set_title('y = e^x')

axs[4].plot(x, y5)
axs[4].set_title('y = e^(-x^2)')

# Show the plot
plt.tight_layout()
plt.show()

"""Pick out a plot of your choice from [here](https://matplotlib.org/stable/gallery/index.html), copy the code to this notebook, run, and document to the best of your abilities."""

import matplotlib.pyplot as plt
import numpy as np

from matplotlib.colors import Normalize
from matplotlib.markers import MarkerStyle
from matplotlib.text import TextPath
from matplotlib.transforms import Affine2D

#creating plot markers:
SUCCESS_SYMBOLS = [
    TextPath((0, 0), "â˜¹"),
    TextPath((0, 0), "ðŸ˜’"),
    TextPath((0, 0), "â˜º"),
]

#generating random data for the plot:
N = 25 #sets total number of data points
skills = np.random.uniform(5, 80, size=N) * 0.1 + 5
takeoff_angles = np.random.normal(0, 90, N)
thrusts = np.random.uniform(size=N)
successful = np.random.randint(0, 3, size=N)
positions = np.random.normal(size=(N, 2)) * 5

#to combine the five arrays into a single iterable of 5-tuples:
data = zip(skills, takeoff_angles, thrusts, successful, positions)

cmap = plt.colormaps["jet"] #colormap for normalized data values in RGBA colors
fig, ax = plt.subplots()  #creating a subplot
fig.suptitle("Throwing success", size=14)

for skill, takeoff, thrust, mood, pos in data:  #creates a loop
    t = Affine2D().scale(skill).rotate_deg(takeoff)  #creates a transformation
    #marker style depends on skill, takeoff, and mood:
    m = MarkerStyle(SUCCESS_SYMBOLS[mood], transform=t)
    #color is determined by the thrust:
    ax.plot(pos[0], pos[1], marker=m, color=cmap(thrust)) #pos stands for position


plt.show()







"""### Graphics Output"""

from IPython.core.display import display, HTML

display(HTML('<h1>Hello World!</h1>'))  #displays text

"""### Numpy - Numerical Python"""

import numpy as np

np.random.random()  #generates a random number between 0 and 1

np.random.random() > 0.5; #checks if r is greater than 0.5

r = np.random.random(); print(r); r >0.5  #prints comparison

r

r > 0.5







def flip_coin():
    if np.random.random() > 0.5: #generates a random value for comparison
        print("Heads") #prints if random number is greater than 0.5
    else:
        print("Tails") #prints if random number is less than 0.5

flip_coin()

np.random.randint(15,20) #generates a random integer between 15 & 19

def coin():
  return np.random.randint(2) #generates a random integer of either 0 or 1

coin() #determined by the random integers 0 and 1

display(HTML('<img src="https://random-ize.com/coin-flip/us-quarter/us-quarter-front.jpg">'))

heads = 'https://random-ize.com/coin-flip/us-quarter/us-quarter-front.jpg'
tails = 'https://random-ize.com/coin-flip/us-quarter/us-quarter-back.jpg'

def show_img(img):
  display(HTML('<img src=' + img + '>'))

show_img(heads)

show_img(tails)

def flip_coin():

    if coin():
        show_img(heads)
    else:
        show_img(tails)

flip_coin()

for i in range(5):  #calls the function 5 times
    flip_coin()





"""# Cards"""



card_url_head = "https://www.improvemagic.com/wp-content/uploads/2020/11/"
card_url_tail = ".png"

suit = ['k','p','s','l'] #clubs,spades,hearts,diamonds
#represents the thirteen ranks in each suit of a deck of cards:
card = ['a','2','3','4','5','6','7','8','9','10','j','q','k']

i = np.random.randint(4) #picks a random integer between 0 and 3
j = np.random.randint(13) #picks a random integer between 0 and 12

i,j

suit[i]

card[j]

def card_image(card_number):  #defines a function with an integer input

    i = card_number//13  #represents card suit
    j = card_number%13   #represents the rank of card within suit

    return suit[i]+card[j]  #concatenates the specific card and suit

card_image(3)

img = card_url_head + card_image(3) + card_url_tail #represents 3 of clubs

img  #shows image url

show_img(img)  #displays image url

for i in range(52):  #represents a loop for the 52-card deck
    img = card_url_head + card_image(i) + card_url_tail
    show_img(img)

import random

def initialize_deck():  #creates a function
    #Create and shuffle a deck of 52 cards represented by numbers 0-51.
    deck = list(range(52)) #creates a list of integers between 0 and 51
    random.shuffle(deck) #shuffles list
    return deck #returns shuffled list

def draw_cards(deck, top_index, num=5):  #creates a function drawing 5 cards
    drawn_cards = deck[top_index:top_index + num]
    return drawn_cards, top_index + num

# Initialize and shuffle the deck
deck = initialize_deck() #shuffles deck of cards
top_index = 0  # Start at the beginning of the deck

deck

# Draw 5 cards for a poker hand
hand, top_index = draw_cards(deck, top_index, 5)

hand

hand, top_index = draw_cards(deck, top_index, 5)

hand

# Display the hand
for card_number in hand:  #creates a loop for card number
    img_url = card_url_head + card_image(card_number) + card_url_tail
    show_img(img_url)  #displays respective card image

def show_hand(hand):  #defines a new function
#constructs and joins a string of HTML that represents a series of images:
    images_html = ''.join([f'<img src="{card_url_head + card_image(card_number) + card_url_tail}" style="display:inline-block; margin:5px;" />' for card_number in hand])
    display(HTML(images_html))

show_hand(hand)  #displays draw of 5 cards





"""# Rank Hand"""

def evaluate_hand(hand):
    #creates a dictionary for card rank:
    rank_values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'j': 11, 'q': 12, 'k': 13, 'a': 14}
    #creates a list for suits:
    suits = ['k', 'p', 's', 'l']  # clubs, spades, hearts, diamonds

    # Convert the hand to a list of (rank, suit) tuples
    converted_hand = [(rank_values[card[card_number % 13]], suits[card_number // 13]) for card_number in hand]
    converted_hand.sort()

    #creates a dictionary to count the frequency of each rank and suit:
    rank_counts = {rank: 0 for rank in rank_values.values()}
    suit_counts = {suit: 0 for suit in suits}
    for rank, suit in converted_hand:  #updates count
        rank_counts[rank] += 1
        suit_counts[suit] += 1

    # Check for flush
    is_flush = max(suit_counts.values()) == 5 #checks if cards are of same suit

    # Check for straight and royal flush
    rank_sequence = [rank for rank, _ in converted_hand]
    #checks if all cards are in sequence:
    is_straight = all(rank_sequence[i] - rank_sequence[i - 1] == 1 for i in range(1, 5))
    #checks if it's a straight flush starting with 10:
    is_royal = is_straight and rank_sequence[0] == 10

    # Check for other hand types
    pairs = sum(1 for count in rank_counts.values() if count == 2)
    three_of_a_kind = 3 in rank_counts.values()
    four_of_a_kind = 4 in rank_counts.values()

    #returns type of hand based on the descending order of their rank in poker:
    if is_royal and is_flush:
        return "Royal Flush"
    elif is_straight and is_flush:
        return "Straight Flush"
    elif four_of_a_kind:
        return "Four of a Kind"
    elif three_of_a_kind and pairs == 1:
        return "Full House"
    elif is_flush:
        return "Flush"
    elif is_straight:
        return "Straight"
    elif three_of_a_kind:
        return "Three of a Kind"
    elif pairs == 2:
        return "Two Pair"
    elif pairs == 1:
        return "One Pair"
    else:
        return "High Card"



# Initialize and shuffle the deck
deck = initialize_deck()
top_index = 0  # Start at the beginning of the deck

hand, top_index = draw_cards(deck, top_index, 5) #draws 5 cards


print(evaluate_hand(hand))  #prints type of hand
show_hand(hand) #shows drawn cards



for i in range(10):  #repeats 10 times
    # Initialize and shuffle the deck
    deck = initialize_deck()
    top_index = 0  # Start at the beginning of the deck

    hand, top_index = draw_cards(deck, top_index, 5)  #draws 5 cards


    print(evaluate_hand(hand)) #prints type
    show_hand(hand) #shows cards



for i in range(100):  #repeats 100 times
    # Initialize and shuffle the deck
    deck = initialize_deck()
    top_index = 0  # Start at the beginning of the deck

    hand, top_index = draw_cards(deck, top_index, 5)  #draws 5 cards

    if evaluate_hand(hand) == "Two Pair":  #assigns target
        print("Winner!")
        show_hand(hand)



for i in range(1000):  #repeats 1000 times
    # Initialize and shuffle the deck
    deck = initialize_deck()
    top_index = 0  # Start at the beginning of the deck

    hand, top_index = draw_cards(deck, top_index, 5)

    if evaluate_hand(hand) == "Flush":  #assigns target
        print("Winner!")
        show_hand(hand)

# Commented out IPython magic to ensure Python compatibility.
# %%timeit  #measures average execution time
# # Initialize and shuffle the deck
# deck = initialize_deck()
# top_index = 0  # Start at the beginning of the deck
# 
# hand, top_index = draw_cards(deck, top_index, 5)
# 
# if evaluate_hand(hand) == "Royal Flush":  #assigns target
#     print("Winner!")
#     show_hand(hand)

for i in range(1000000):  #repeats 1000000 times
    # Initialize and shuffle the deck
    deck = initialize_deck()
    top_index = 0  # Start at the beginning of the deck

    hand, top_index = draw_cards(deck, top_index, 5)

    if evaluate_hand(hand) == "Royal Flush":  #assigns target
        print("Winner!")
        show_hand(hand)



wins = 0
N = 10000000  #repetition number

for i in range(N):
    # Initialize and shuffle the deck
    deck = initialize_deck()
    top_index = 0  # Start at the beginning of the deck

    hand, top_index = draw_cards(deck, top_index, 5)  #draws cards

    if evaluate_hand(hand) == "Royal Flush": #royal flush is considered winning
        wins += 1  #counts frequency of royal flush
        print("Winner!")
        show_hand(hand)

wins/N  #find the probability of drawing a royal flush

